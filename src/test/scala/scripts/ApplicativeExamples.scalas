import nous.core.Applicative
// Examples of using Applicative

// map examples
Applicative[Option].map(Some(1))(_ + 1) // --> Some(2)

Applicative[List].map(List(1, 2, 3))(_ + 1) // --> List(2,3,4)

// map2
Applicative[Option].map2(Option(1), Option(2))(_ + _) // --> Some(3)

Applicative[List].map2(List(1,2,3), List(4,5,6))(_ + _) // --> List(5,6,7,6,7,8,7,8,9) : 1+4,1+5,1+6,2+4,2+5,2+6,3+4,3+5,3+6

// map3
Applicative[Option].map3(Option(1), Option(2), Option(3))(_ + _ + _) // --> Some(6)

// tuple methods
Applicative[Option].tuple2(Option(1), Option(2)) // --> Some((1,2))

Applicative[Option].tuple3(Option(1), Option(2), Option(3)) // --> Some((1,2,3))

// returns the cross-product of the 2 lists...
Applicative[List].tuple2(List(1,2,3), List(4,5,6)) // --> List((1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6))

// map4 (implemented using tuple2 and map2)
Applicative[Option].map4(Option(1), Option(2), Option(3), Option(4))(_ + _ + _ + _) // --> Some(10)

// comparison to for comprehensions:
// Without applicatives (and mapX implementations), a for comprehension is often used; e.g, instead of map3:
for { x <- Option(1); y <- Option(2); z <- Option(3) } yield x + y + z // --> Some(6)
// For this to work, though, flatMap is required.  The above, for example, de-sugars to:
Option(1).flatMap { x => Option(2).flatMap { y => Option(3).map { z => x + y + z } } } // --> Some(6)
// This approach, though, has some particular limitations.  Everything starts with Option(1);
// Option(1) has to be evaluated, and its flatMap method invoked, and the value 1 is passed as the x parameter.
// In other words, the second operation depends upon the result of the first operation (with Monads, which introduce the flatMap method,
// enforce this sequencing of operations.
// In this case, though, x, y, and z are completely independent (and thus could be evaluated separately or even in parallel).
// For these 'simpler' cases, using a for comprehension might be a 'heavier' approach than is really required, and introduces
// dependencies between operations.
// Applicatives (such as Option or Either (disjunction)) are useful for validation / error-handling contexts.  If the monadic / for comprehension
// (flatMap) approach is used, you have an enforced fail-fast context-- because of the sequential dependence between operations,
// if a None (or a 'bad' / Left-value) is encountered, you can't go on.  With Applicatives, however, you can evaluate each
// operation independently, allowing you to collect all error-cases (validation failures)-- you could run all operations in parallel (i.e,
// then can be evaluated in isolation, whether this is done concurrently or not), and then accumulate any/all errors or validation failures.

// Applicatives, like Functors, are composable (composition can be implemented solely in terms of the operations defined by Applicative):
val x = Applicative[List] compose Applicative[Option] // returns a new type Applicative[List[Option]]
// So now we can do operations such as map2 on a List[Option[Int]], but still pass in a function that works just on Ints,
// not caring that they are wrapped in Options.
// This will perform (have the effect) of the List Applicative's cross-product, with the elements of the list having the effect
// of optionality:
x.map2(List(Some(1), None, Some(2)), List(Some(2), Some(1)))(_ + _) // -> List[Option[Int]] = List(Some(3), Some(2), None, None, Some(4), Some(3))